import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:image_picker/image_picker.dart';
import 'package:invoice_generator/view/screen/Quatation/quatation.dart';

class QuotationController extends GetxController {
  Rx<DateTime?> QuotationdueDate = Rx<DateTime?>(null);
  RxString address = ''.obs;
  Rx<XFile?> signature = Rx<XFile?>(null);

  RxList Quotation = [].obs;
  var notesText = ''.obs;
  var termsText = ''.obs;
  var deliveryCharges = ''.obs;
  var packagingCharges = ''.obs;
  var discountAmount = ''.obs;
  RxString paymentMethod = 'Cash'.obs;
  RxString paymentTerms = ''.obs;
  RxString paymentBankName = ''.obs;
  RxString paymentAccountNumber = ''.obs;
  RxString paymentIFSC = ''.obs;

  TextEditingController addressController = TextEditingController();
  TextEditingController notesController = TextEditingController();
  TextEditingController termsController = TextEditingController();
  TextEditingController dilivryController = TextEditingController();
  TextEditingController discountController = TextEditingController();
  TextEditingController pakageController = TextEditingController();
  TextEditingController refrenceController = TextEditingController();
  TextEditingController bankName = TextEditingController();
  TextEditingController acc = TextEditingController();
  TextEditingController ifsc = TextEditingController();
  late XFile? image;
  
   QuatationDataAdd() {
   if(addressController.text.isNotEmpty){
     Quotation.add({
       'address': addressController.text,
       'notes': notesController.text,
       'terms': termsController.text,
       'deliveryCharges': dilivryController.text,
       'discountAmount': discountController.text,
       'packagingCharges': pakageController.text,
       'refrence': refrenceController.text,
       'bankName': bankName.text,
       'acc': acc.text,
       'ifsc': ifsc.text,
       'signature': signature.value,
       'paymentMethod': paymentMethod.value,
       'paymentTerms': paymentTerms.value,
     });
   }
   }

  void clearData() {
    addressController.clear();
    notesController.clear();
    termsController.clear();
    dilivryController.clear();
    discountController.clear();
    pakageController.clear();
    refrenceController.clear();
    bankName.clear();
    acc.clear();
    ifsc.clear();
    signature.value = null;
    paymentMethod = 'Cash'.obs;
    paymentTerms = ''.obs;
    paymentBankName = ''.obs;
    paymentAccountNumber = ''.obs;
    paymentIFSC = ''.obs;
    QuotationdueDate.value = null;
    update();
  }

  Future<void> selectQuotationdueDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: QuotationdueDate.value ?? DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2100),
    );
    if (picked != null) {
      QuotationdueDate.value = picked;
      update();
    }
  }

  Future<void> pickSignature() async {
    final ImagePicker picker = ImagePicker();
    image = await picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      signature.value = image;
    }
  }

  Widget buildQuotationInfo(BuildContext context) {
    DateTime date = DateTime.now();
    return Transform.scale(
      scale: 1,
      child: Container(
        width: double.infinity,
        decoration: BoxDecoration(
          color: Colors.grey[900],
          borderRadius: BorderRadius.circular(12),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text("EST #", style: TextStyle(color: Colors.grey)),
              const Text(
                "EST-1",
                style: TextStyle(fontSize: 18, color: Colors.white),
              ),
              Row(
                children: [
                  Text(
                    date.toString().split(' ')[0],
                    style: TextStyle(color: Colors.grey),
                  ),
                  const SizedBox(height: 8),
                  GestureDetector(
                    onTap: () => selectQuotationdueDate(context),
                    child: Row(
                      children: [
                        const SizedBox(width: 55),
                        const Text(
                          "Due Date: ",
                          style: TextStyle(color: Colors.grey),
                        ),
                        Obx(() {
                          return Text(
                            QuotationdueDate.value != null
                                ? QuotationdueDate.value.toString().split(
                                  ' ',
                                )[0]
                                : "Select Date",
                            style: const TextStyle(
                              color: Colors.blueAccent,
                              fontWeight: FontWeight.bold,
                            ),
                          );
                        }),
                        const SizedBox(width: 6),
                        const Icon(
                          Icons.calendar_today,
                          color: Colors.grey,
                          size: 16,
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
